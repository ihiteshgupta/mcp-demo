version: '3.8'

services:
  # Orchestrator - Central management
  orchestrator:
    build: 
      context: ./orchestrator
      dockerfile: Dockerfile
    container_name: mcp-orchestrator
    ports:
      - "8000:8000"
    environment:
      - LOG_LEVEL=INFO
      - AUTO_START_SERVICES=true
    volumes:
      - ./orchestrator/config:/app/config
      - ./data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock  # For container management
    depends_on:
      - redis
      - postgres
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LLM Provider Server
  llm-provider:
    build:
      context: ./llm-provider
      dockerfile: Dockerfile
    container_name: mcp-llm-provider
    ports:
      - "8002:8002"
    environment:
      - LOG_LEVEL=INFO
      - MCP_SERVER_NAME=llm-provider
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
    volumes:
      - ./llm-provider/config.json:/app/config.json
      - ./data/llm-cache:/app/cache
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vector Store Server
  vector-store:
    build:
      context: ./vector-store
      dockerfile: Dockerfile
    container_name: mcp-vector-store
    ports:
      - "8003:8003"
    environment:
      - LOG_LEVEL=INFO
      - MCP_SERVER_NAME=vector-store
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8001
    volumes:
      - ./vector-store/config.json:/app/config.json
      - ./data/vectors:/app/data
    depends_on:
      - chromadb
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8003/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Memory Management Server
  memory:
    build:
      context: ./memory
      dockerfile: Dockerfile
    container_name: mcp-memory
    ports:
      - "8004:8004"
    environment:
      - LOG_LEVEL=INFO
      - MCP_SERVER_NAME=memory
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://mcp_user:mcp_password@postgres:5432/mcp_db
    volumes:
      - ./memory/config.json:/app/config.json
      - ./data/memory:/app/data
    depends_on:
      - redis
      - postgres
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8004/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Fetch Server
  web-fetch:
    build:
      context: ./web-fetch
      dockerfile: Dockerfile
    container_name: mcp-web-fetch
    ports:
      - "8005:8005"
    environment:
      - LOG_LEVEL=INFO
      - MCP_SERVER_NAME=web-fetch
    volumes:
      - ./web-fetch/config.json:/app/config.json
      - ./data/web-cache:/app/cache
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8005/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sequential Thinker Server
  sequential-thinker:
    build:
      context: ../sequential-thinker-mcp
      dockerfile: Dockerfile
    container_name: mcp-sequential-thinker
    ports:
      - "8001:8001"
    environment:
      - LOG_LEVEL=INFO
      - MCP_SERVER_NAME=sequential-thinker
    volumes:
      - ../sequential-thinker-mcp/config.json:/app/config.json
      - ./data/thinking:/app/data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Supporting Services
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --appendfsync everysec
    volumes:
      - redis-data:/data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: mcp_db
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: mcp_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_db"]
      interval: 30s
      timeout: 5s
      retries: 3

  chromadb:
    image: chromadb/chroma:latest
    container_name: mcp-chromadb
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER=chromadb.auth.token.TokenAuthCredentialsProvider
      - CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER=X-Chroma-Token
      - CHROMA_SERVER_AUTH_CREDENTIALS=mcp-chroma-token
    volumes:
      - chromadb-data:/chroma/chroma
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Optional: Monitoring stack
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - mcp-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mcp-network
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # Load balancer for high availability
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - orchestrator
    networks:
      - mcp-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  chromadb-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16