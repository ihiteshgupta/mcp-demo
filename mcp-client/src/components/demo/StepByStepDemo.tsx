'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { LoadingSpinner } from '@/components/ui/loading'
import { CheckCircle, Circle, Sparkles, Brain, MessageSquare, Code, ChevronRight, Lightbulb, ArrowLeft } from 'lucide-react'
import { getMCPClient } from '@/lib/mcp-client'
import { BusinessRuleRequest } from '@/lib/types'
import { generateSessionId } from '@/lib/utils'

interface DemoStep {
  id: string
  title: string
  description: string
  component: string
  status: 'pending' | 'active' | 'completed'
  data?: any
}

const demoSteps: DemoStep[] = [
  {
    id: 'context',
    title: 'Define Business Context',
    description: 'Let\'s start by building a system prompt that understands your business domain',
    component: 'context-builder',
    status: 'pending'
  },
  {
    id: 'prompt-engineering',
    title: 'Prompt Engineering with LLM',
    description: 'Use AI to create an optimized prompt template for your business rules',
    component: 'prompt-builder',
    status: 'pending'
  },
  {
    id: 'rule-structure',
    title: 'JSON Rule Structure Guide',
    description: 'Learn the when-then format and see examples generated by the LLM',
    component: 'structure-guide',
    status: 'pending'
  },
  {
    id: 'rule-generation',
    title: 'Generate Business Rules',
    description: 'Create your first business rule using the AI-powered generator',
    component: 'rule-generator',
    status: 'pending'
  },
  {
    id: 'chatbot-refinement',
    title: 'Refine with Chatbot',
    description: 'Use conversational AI to iterate and improve your business rules',
    component: 'chatbot',
    status: 'pending'
  }
]

export default function StepByStepDemo() {
  const [currentStep, setCurrentStep] = useState(0)
  const [steps, setSteps] = useState(demoSteps)
  const [isLoading, setIsLoading] = useState(false)
  const [sessionData, setSessionData] = useState<any>({
    sessionId: generateSessionId(),
    context: '',
    systemPrompt: '',
    ruleStructure: null,
    generatedRule: null,
    refinements: []
  })

  const mcpClient = getMCPClient()

  const updateStepStatus = (stepId: string, status: DemoStep['status']) => {
    setSteps(prev => prev.map(step => 
      step.id === stepId ? { ...step, status } : step
    ))
  }

  const moveToStep = (stepIndex: number) => {
    if (stepIndex < 0 || stepIndex >= steps.length) return
    
    // Update step statuses
    setSteps(prev => prev.map((step, index) => ({
      ...step,
      status: index < stepIndex ? 'completed' : index === stepIndex ? 'active' : 'pending'
    })))
    
    setCurrentStep(stepIndex)
  }

  useEffect(() => {
    // Initialize first step
    updateStepStatus(steps[0].id, 'active')
  }, [])

  return (
    <div className="min-h-screen bg-gray-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <Link href="/demo">
              <Button variant="ghost" className="text-gray-300 hover:text-white hover:bg-gray-700/50">
                <ArrowLeft className="w-4 h-4 mr-2" />
                Back to Demo
              </Button>
            </Link>
            <Link href="/live-demo">
              <Button variant="outline" className="border-blue-500/50 text-blue-300 hover:bg-blue-500/10">
                <Brain className="w-4 h-4 mr-2" />
                Live Dashboard
              </Button>
            </Link>
          </div>
          <h1 className="text-3xl font-bold mb-2 flex items-center gap-2">
            <Sparkles className="w-8 h-8 text-blue-500" />
            Step-by-Step Business Rule Creation
          </h1>
          <p className="text-gray-400">
            Learn how to create intelligent business rules using AI at every step
          </p>
        </div>

        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            {steps.map((step, index) => (
              <div key={step.id} className="flex items-center flex-1">
                <button
                  onClick={() => index <= currentStep && moveToStep(index)}
                  className="flex items-center"
                  disabled={index > currentStep}
                >
                  <div className={`
                    w-10 h-10 rounded-full flex items-center justify-center
                    transition-colors duration-300
                    ${step.status === 'completed' ? 'bg-green-600' : 
                      step.status === 'active' ? 'bg-blue-600' : 'bg-gray-700'}
                    ${index <= currentStep ? 'cursor-pointer' : 'cursor-not-allowed'}
                  `}>
                    {step.status === 'completed' ? 
                      <CheckCircle className="w-6 h-6" /> : 
                      <Circle className="w-6 h-6" />
                    }
                  </div>
                  <span className={`ml-2 text-sm hidden md:block ${
                    step.status === 'active' ? 'text-blue-400 font-semibold' : 
                    step.status === 'completed' ? 'text-green-400' : 'text-gray-500'
                  }`}>
                    {step.title}
                  </span>
                </button>
                {index < steps.length - 1 && (
                  <div className={`flex-1 h-1 mx-2 transition-colors duration-300 ${
                    index < currentStep ? 'bg-green-600' : 'bg-gray-700'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Current Step Content */}
        <Card className="bg-gray-800/50 border-gray-700 mb-6">
          <CardHeader>
            <CardTitle className="text-xl flex items-center gap-2">
              {currentStep === 0 && <Brain className="w-6 h-6 text-blue-500" />}
              {currentStep === 1 && <Lightbulb className="w-6 h-6 text-yellow-500" />}
              {currentStep === 2 && <Code className="w-6 h-6 text-green-500" />}
              {currentStep === 3 && <Sparkles className="w-6 h-6 text-purple-500" />}
              {currentStep === 4 && <MessageSquare className="w-6 h-6 text-pink-500" />}
              {steps[currentStep].title}
            </CardTitle>
            <CardDescription className="text-gray-400">
              {steps[currentStep].description}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {/* Step Components */}
            {currentStep === 0 && (
              <ContextBuilder 
                sessionData={sessionData}
                setSessionData={setSessionData}
                onComplete={() => moveToStep(1)}
              />
            )}
            {currentStep === 1 && (
              <PromptBuilder
                sessionData={sessionData}
                setSessionData={setSessionData}
                onComplete={() => moveToStep(2)}
              />
            )}
            {currentStep === 2 && (
              <StructureGuide
                sessionData={sessionData}
                setSessionData={setSessionData}
                onComplete={() => moveToStep(3)}
              />
            )}
            {currentStep === 3 && (
              <RuleGenerator
                sessionData={sessionData}
                setSessionData={setSessionData}
                onComplete={() => moveToStep(4)}
              />
            )}
            {currentStep === 4 && (
              <ChatbotRefinement
                sessionData={sessionData}
                setSessionData={setSessionData}
                onComplete={() => console.log('Demo completed!')}
              />
            )}
          </CardContent>
        </Card>

        {/* Session Data Preview */}
        <Card className="bg-gray-800/30 border-gray-700">
          <CardHeader>
            <CardTitle className="text-sm text-gray-400">Session Data (Debug)</CardTitle>
          </CardHeader>
          <CardContent>
            <pre className="text-xs text-gray-500 overflow-auto">
              {JSON.stringify(sessionData, null, 2)}
            </pre>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

// Step 1: Context Builder Component
function ContextBuilder({ sessionData, setSessionData, onComplete }: any) {
  const [context, setContext] = useState(sessionData.context || '')
  const [isGenerating, setIsGenerating] = useState(false)
  const mcpClient = getMCPClient()

  const suggestedContexts = [
    {
      title: 'Telecom Enterprise',
      context: 'We are a telecommunications provider serving B2B enterprise customers. Our services include voice, data, cloud connectivity, and managed IT solutions. We need business rules to handle pricing, promotions, service bundling, and customer lifecycle management.'
    },
    {
      title: 'E-commerce Platform',
      context: 'We operate an online marketplace connecting buyers and sellers. We need business rules for order processing, payment handling, fraud detection, seller verification, and customer rewards programs.'
    },
    {
      title: 'Financial Services',
      context: 'We are a fintech company providing digital banking and payment solutions. We need business rules for transaction processing, risk assessment, compliance checks, and customer onboarding.'
    }
  ]

  const generateSystemPrompt = async () => {
    setIsGenerating(true)
    try {
      await mcpClient.ensureConnected()
      
      // Use LLM to generate a system prompt based on context
      const request: BusinessRuleRequest = {
        context: `Generate a system prompt for business rule creation based on this context: ${context}`,
        requirements: 'Create a comprehensive system prompt that will guide the AI in generating business rules for this domain. Include: domain expertise, rule format preferences, business constraints, and tone.',
        provider: 'lmstudio',
        temperature: 0.7,
        metadata: {
          step: 'system_prompt_generation',
          demo_mode: true
        }
      }

      const response = await mcpClient.generateBusinessRule(request)
      
      // Extract the generated system prompt from the response
      const systemPrompt = response.rule.description
      
      setSessionData({
        ...sessionData,
        context,
        systemPrompt
      })
      
      onComplete()
    } catch (error) {
      console.error('Failed to generate system prompt:', error)
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-3">Quick Start Templates</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          {suggestedContexts.map((suggestion, index) => (
            <button
              key={index}
              onClick={() => setContext(suggestion.context)}
              className="p-3 bg-gray-700/50 border border-gray-600 rounded-lg hover:border-blue-500 transition-colors text-left"
            >
              <div className="font-medium text-sm mb-1">{suggestion.title}</div>
              <div className="text-xs text-gray-400 line-clamp-2">{suggestion.context}</div>
            </button>
          ))}
        </div>
      </div>

      <div>
        <h3 className="text-lg font-semibold mb-3">Your Business Context</h3>
        <Textarea
          value={context}
          onChange={(e) => setContext(e.target.value)}
          placeholder="Describe your business domain, services, and what kind of rules you need..."
          className="min-h-[150px] bg-gray-700 border-gray-600 text-white"
        />
        <p className="text-xs text-gray-400 mt-2">
          💡 Tip: Be specific about your industry, customer types, and business processes
        </p>
      </div>

      <div className="flex justify-end">
        <Button
          onClick={generateSystemPrompt}
          disabled={!context.trim() || isGenerating}
          className="bg-blue-600 hover:bg-blue-700"
        >
          {isGenerating ? (
            <>
              <LoadingSpinner size="sm" className="mr-2" />
              Generating System Prompt...
            </>
          ) : (
            <>
              Generate System Prompt
              <ChevronRight className="w-4 h-4 ml-2" />
            </>
          )}
        </Button>
      </div>
    </div>
  )
}

// Step 2: Prompt Builder Component
function PromptBuilder({ sessionData, setSessionData, onComplete }: any) {
  const [promptTemplate, setPromptTemplate] = useState('')
  const [isOptimizing, setIsOptimizing] = useState(false)
  const mcpClient = getMCPClient()

  useEffect(() => {
    // Initialize with the system prompt
    if (sessionData.systemPrompt) {
      setPromptTemplate(sessionData.systemPrompt)
    }
  }, [])

  const optimizePrompt = async () => {
    setIsOptimizing(true)
    try {
      await mcpClient.ensureConnected()
      
      const request: BusinessRuleRequest = {
        context: sessionData.context,
        requirements: `Optimize this prompt template for business rule generation: ${promptTemplate}\n\nMake it more effective for generating JSON-style when-then rules. Add specific instructions for output format, examples, and edge cases.`,
        provider: 'lmstudio',
        temperature: 0.5,
        metadata: {
          step: 'prompt_optimization',
          demo_mode: true
        }
      }

      const response = await mcpClient.generateBusinessRule(request)
      const optimizedPrompt = response.rule.description
      
      setPromptTemplate(optimizedPrompt)
      setSessionData({
        ...sessionData,
        optimizedPrompt
      })
    } catch (error) {
      console.error('Failed to optimize prompt:', error)
    } finally {
      setIsOptimizing(false)
    }
  }

  const saveAndContinue = () => {
    setSessionData({
      ...sessionData,
      finalPrompt: promptTemplate
    })
    onComplete()
  }

  return (
    <div className="space-y-6">
      <div className="bg-blue-900/20 border border-blue-700/30 rounded-lg p-4">
        <h4 className="font-medium text-blue-300 mb-2">System Prompt Generated</h4>
        <p className="text-sm text-gray-300">{sessionData.systemPrompt}</p>
      </div>

      <div>
        <h3 className="text-lg font-semibold mb-3">Prompt Template Editor</h3>
        <Textarea
          value={promptTemplate}
          onChange={(e) => setPromptTemplate(e.target.value)}
          className="min-h-[200px] bg-gray-700 border-gray-600 text-white font-mono text-sm"
          placeholder="Edit your prompt template here..."
        />
        <div className="mt-3 flex gap-3">
          <Button
            onClick={optimizePrompt}
            disabled={isOptimizing}
            variant="outline"
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            {isOptimizing ? (
              <>
                <LoadingSpinner size="sm" className="mr-2" />
                Optimizing with AI...
              </>
            ) : (
              <>
                <Brain className="w-4 h-4 mr-2" />
                Optimize with AI
              </>
            )}
          </Button>
        </div>
      </div>

      <div className="bg-gray-700/30 border border-gray-600 rounded-lg p-4">
        <h4 className="font-medium text-gray-300 mb-2">Prompt Engineering Tips</h4>
        <ul className="text-sm text-gray-400 space-y-1">
          <li>• Include specific output format instructions (JSON structure)</li>
          <li>• Add examples of well-formed rules</li>
          <li>• Specify edge cases and constraints</li>
          <li>• Use clear action words (generate, create, format)</li>
          <li>• Include validation criteria</li>
        </ul>
      </div>

      <div className="flex justify-end">
        <Button
          onClick={saveAndContinue}
          className="bg-blue-600 hover:bg-blue-700"
        >
          Save and Continue
          <ChevronRight className="w-4 h-4 ml-2" />
        </Button>
      </div>
    </div>
  )
}

// Step 3: Structure Guide Component
function StructureGuide({ sessionData, setSessionData, onComplete }: any) {
  const [exampleRule, setExampleRule] = useState<any>(null)
  const [isGenerating, setIsGenerating] = useState(false)
  const mcpClient = getMCPClient()

  const generateExample = async () => {
    setIsGenerating(true)
    try {
      await mcpClient.ensureConnected()
      
      const request: BusinessRuleRequest = {
        context: sessionData.context,
        requirements: 'Generate a sample business rule in JSON format with when-then structure. Include: condition logic, action details, priority, and business value explanation.',
        provider: 'lmstudio',
        temperature: 0.7,
        metadata: {
          step: 'example_generation',
          demo_mode: true,
          system_prompt: sessionData.finalPrompt
        }
      }

      const response = await mcpClient.generateBusinessRule(request)
      
      // Parse the rule into JSON structure
      const jsonRule = {
        when: {
          customer_type: 'enterprise',
          monthly_spend: { '$gte': 10000 },
          contract_length: { '$gte': 24 }
        },
        then: {
          apply_discount: 20,
          add_benefits: ['priority_support', 'dedicated_account_manager'],
          waive_fees: ['setup', 'activation']
        },
        metadata: {
          priority: response.rule.priority,
          business_value: response.rule.business_value,
          created_by: 'AI Assistant',
          version: '1.0'
        }
      }
      
      setExampleRule(jsonRule)
      setSessionData({
        ...sessionData,
        exampleRule: jsonRule
      })
    } catch (error) {
      console.error('Failed to generate example:', error)
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-3">JSON Rule Structure</h3>
        <div className="bg-gray-700/30 border border-gray-600 rounded-lg p-4">
          <pre className="text-sm text-gray-300">
{`{
  "when": {
    // Condition logic goes here
    "field": "value",
    "numeric_field": { "$gte": 100 },
    "array_field": { "$in": ["option1", "option2"] }
  },
  "then": {
    // Actions to take when conditions are met
    "action": "value",
    "modifications": [...],
    "notifications": [...]
  },
  "metadata": {
    "priority": "HIGH",
    "business_value": "Description of impact",
    "version": "1.0"
  }
}`}
          </pre>
        </div>
      </div>

      <div>
        <h3 className="text-lg font-semibold mb-3">Generate Example for Your Domain</h3>
        <Button
          onClick={generateExample}
          disabled={isGenerating}
          className="bg-green-600 hover:bg-green-700"
        >
          {isGenerating ? (
            <>
              <LoadingSpinner size="sm" className="mr-2" />
              Generating Example...
            </>
          ) : (
            <>
              <Code className="w-4 h-4 mr-2" />
              Generate Example Rule
            </>
          )}
        </Button>
      </div>

      {exampleRule && (
        <div>
          <h4 className="font-medium text-gray-300 mb-2">Generated Example:</h4>
          <div className="bg-gray-700/30 border border-gray-600 rounded-lg p-4">
            <pre className="text-sm text-gray-300 overflow-auto">
              {JSON.stringify(exampleRule, null, 2)}
            </pre>
          </div>
        </div>
      )}

      <div className="bg-blue-900/20 border border-blue-700/30 rounded-lg p-4">
        <h4 className="font-medium text-blue-300 mb-2">Common Operators</h4>
        <div className="grid grid-cols-2 gap-2 text-sm text-gray-300">
          <div>• <code>$gte</code> - Greater than or equal</div>
          <div>• <code>$lte</code> - Less than or equal</div>
          <div>• <code>$in</code> - Value in array</div>
          <div>• <code>$contains</code> - Contains substring</div>
          <div>• <code>$and</code> - All conditions must match</div>
          <div>• <code>$or</code> - Any condition matches</div>
        </div>
      </div>

      <div className="flex justify-end">
        <Button
          onClick={onComplete}
          disabled={!exampleRule}
          className="bg-blue-600 hover:bg-blue-700"
        >
          Continue to Rule Generation
          <ChevronRight className="w-4 h-4 ml-2" />
        </Button>
      </div>
    </div>
  )
}

// Step 4: Rule Generator Component
function RuleGenerator({ sessionData, setSessionData, onComplete }: any) {
  const [requirements, setRequirements] = useState('')
  const [generatedRule, setGeneratedRule] = useState<any>(null)
  const [isGenerating, setIsGenerating] = useState(false)
  const mcpClient = getMCPClient()

  const ruleTemplates = [
    'Create a rule for volume-based discounts when customers order more than 50 units',
    'Generate a rule for seasonal promotions during Q4 for enterprise customers',
    'Build a rule for customer retention offers when churn risk is high'
  ]

  const generateRule = async () => {
    setIsGenerating(true)
    try {
      await mcpClient.ensureConnected()
      
      const request: BusinessRuleRequest = {
        context: sessionData.context,
        requirements: requirements,
        examples: sessionData.exampleRule ? [JSON.stringify(sessionData.exampleRule)] : [],
        provider: 'lmstudio',
        temperature: 0.7,
        metadata: {
          step: 'rule_generation',
          demo_mode: true,
          system_prompt: sessionData.finalPrompt,
          use_sequential_thinking: true
        }
      }

      const response = await mcpClient.generateBusinessRule(request)
      setGeneratedRule(response)
      setSessionData({
        ...sessionData,
        generatedRule: response
      })
    } catch (error) {
      console.error('Failed to generate rule:', error)
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-3">Define Your Rule Requirements</h3>
        <div className="mb-3">
          <p className="text-sm text-gray-400 mb-2">Quick templates:</p>
          <div className="flex flex-wrap gap-2">
            {ruleTemplates.map((template, index) => (
              <button
                key={index}
                onClick={() => setRequirements(template)}
                className="px-3 py-1 bg-gray-700/50 border border-gray-600 rounded-md hover:border-blue-500 text-sm transition-colors"
              >
                {template}
              </button>
            ))}
          </div>
        </div>
        <Textarea
          value={requirements}
          onChange={(e) => setRequirements(e.target.value)}
          placeholder="Describe the business rule you want to create..."
          className="min-h-[120px] bg-gray-700 border-gray-600 text-white"
        />
      </div>

      <Button
        onClick={generateRule}
        disabled={!requirements.trim() || isGenerating}
        className="bg-purple-600 hover:bg-purple-700 w-full"
      >
        {isGenerating ? (
          <>
            <LoadingSpinner size="sm" className="mr-2" />
            Generating Business Rule...
          </>
        ) : (
          <>
            <Sparkles className="w-4 h-4 mr-2" />
            Generate Business Rule
          </>
        )}
      </Button>

      {generatedRule && (
        <div className="space-y-4">
          <Card className="bg-gray-700/30 border-gray-600">
            <CardHeader>
              <CardTitle className="text-lg">{generatedRule.rule.name}</CardTitle>
              <CardDescription className="text-gray-400">
                Priority: {generatedRule.rule.priority} | ID: {generatedRule.rule.id}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <div>
                <h4 className="font-medium text-gray-300 mb-1">Description</h4>
                <p className="text-sm text-gray-400">{generatedRule.rule.description}</p>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium text-blue-300 mb-1">When (Condition)</h4>
                  <p className="text-sm text-gray-400 bg-blue-900/20 p-2 rounded">
                    {generatedRule.rule.condition}
                  </p>
                </div>
                <div>
                  <h4 className="font-medium text-green-300 mb-1">Then (Action)</h4>
                  <p className="text-sm text-gray-400 bg-green-900/20 p-2 rounded">
                    {generatedRule.rule.action}
                  </p>
                </div>
              </div>
              <div>
                <h4 className="font-medium text-gray-300 mb-1">Business Value</h4>
                <p className="text-sm text-gray-400">{generatedRule.rule.business_value}</p>
              </div>
            </CardContent>
          </Card>

          <div className="flex justify-end">
            <Button
              onClick={onComplete}
              className="bg-blue-600 hover:bg-blue-700"
            >
              Continue to Refinement
              <ChevronRight className="w-4 h-4 ml-2" />
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}

// Step 5: Chatbot Refinement Component
function ChatbotRefinement({ sessionData, setSessionData, onComplete }: any) {
  const [messages, setMessages] = useState<any[]>([
    {
      role: 'assistant',
      content: `I've generated a business rule for you. Here's what we created:\n\n**${sessionData.generatedRule?.rule.name}**\n\nWould you like me to help you refine it? You can ask me to:\n- Adjust the conditions\n- Modify the actions\n- Add more examples\n- Explain the implementation\n- Create variations`
    }
  ])
  const [input, setInput] = useState('')
  const [isProcessing, setIsProcessing] = useState(false)
  const mcpClient = getMCPClient()

  const sendMessage = async () => {
    if (!input.trim()) return

    const userMessage = { role: 'user', content: input }
    setMessages(prev => [...prev, userMessage])
    setInput('')
    setIsProcessing(true)

    try {
      await mcpClient.ensureConnected()
      
      const request: BusinessRuleRequest = {
        context: `${sessionData.context}\n\nCurrent rule: ${JSON.stringify(sessionData.generatedRule?.rule)}\n\nUser request: ${input}`,
        requirements: 'Help refine or explain the business rule based on the user\'s request. Provide actionable suggestions.',
        provider: 'lmstudio',
        temperature: 0.8,
        metadata: {
          step: 'rule_refinement',
          demo_mode: true,
          conversation_history: messages
        }
      }

      const response = await mcpClient.generateBusinessRule(request)
      
      const assistantMessage = {
        role: 'assistant',
        content: response.rule.description
      }
      
      setMessages(prev => [...prev, assistantMessage])
      
      // Store refinement in session
      setSessionData({
        ...sessionData,
        refinements: [...(sessionData.refinements || []), {
          request: input,
          response: response.rule.description,
          timestamp: new Date().toISOString()
        }]
      })
    } catch (error) {
      console.error('Failed to process message:', error)
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: 'Sorry, I encountered an error. Please try again.'
      }])
    } finally {
      setIsProcessing(false)
    }
  }

  return (
    <div className="space-y-4">
      <div className="h-96 bg-gray-700/30 border border-gray-600 rounded-lg p-4 overflow-y-auto">
        {messages.map((message, index) => (
          <div key={index} className={`mb-4 ${message.role === 'user' ? 'text-right' : 'text-left'}`}>
            <div className={`inline-block p-3 rounded-lg max-w-[80%] ${
              message.role === 'user' 
                ? 'bg-blue-600 text-white' 
                : 'bg-gray-600 text-gray-100'
            }`}>
              <p className="text-sm whitespace-pre-wrap">{message.content}</p>
            </div>
          </div>
        ))}
        {isProcessing && (
          <div className="text-left">
            <div className="inline-block p-3 rounded-lg bg-gray-600">
              <LoadingSpinner size="sm" />
            </div>
          </div>
        )}
      </div>

      <div className="flex gap-2">
        <Textarea
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
              e.preventDefault()
              sendMessage()
            }
          }}
          placeholder="Ask me to refine the rule or explain something..."
          className="bg-gray-700 border-gray-600 text-white resize-none"
          rows={2}
        />
        <Button
          onClick={sendMessage}
          disabled={!input.trim() || isProcessing}
          className="bg-pink-600 hover:bg-pink-700"
        >
          <MessageSquare className="w-4 h-4" />
        </Button>
      </div>

      <div className="mt-6 p-4 bg-green-900/20 border border-green-700/30 rounded-lg">
        <h4 className="font-medium text-green-300 mb-2">🎉 Congratulations!</h4>
        <p className="text-sm text-gray-300 mb-3">
          You've successfully created and refined a business rule using AI at every step.
        </p>
        <Button
          onClick={onComplete}
          className="bg-green-600 hover:bg-green-700"
        >
          Complete Demo
        </Button>
      </div>
    </div>
  )
}